name: CI (Release)

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/release
          target/debug
          target/.rustc_info.json
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Release build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --all-features
    - name: Create archive
      run: |
        mkdir ${{ runner.temp }}/zifu
        Copy-Item "target/release/zifu$(if($IsWindows) { '.exe' } else { '' })","README.md","LICENSE.txt" ${{ runner.temp }}/zifu
        Compress-Archive ${{ runner.temp }}/zifu ${{ runner.temp }}/zifu-${{ runner.os }}.zip
      shell: pwsh
    - name: Install cargo deb
      uses: actions-rs/cargo@v1
      with:
        command: install
        args: cargo-deb
      if: runner.os == 'Linux'
    - name: Build .deb package
      uses: actions-rs/cargo@v1
      with:
        command: deb
      if: runner.os == 'Linux'
    - name: Upload ZIP archive as artifact
      uses: actions/upload-artifact@v2
      with:
        name: zip-archive-${{ runner.os }}
        path: ${{ runner.temp }}/zifu*.zip
    - name: Upload .deb package as artifact
      uses: actions/upload-artifact@v2
      with:
        name: deb-package
        path: target/debian/*.deb
      if: runner.os == 'Linux'
  release:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
        path: ${{ runner.temp }}
    - name: Create a Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
        tag_name: ${{ github.ref }}
        # The name of the release. For example, `Release v1.0.1`
        release_name: Release ${{ github.ref }}
    - name: Get the version
      id: get_version
      run: |
        echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
        echo ::set-output name=DEB_NAME::$(basename $(ls ${{ runner.temp }}/deb-package/*.deb | tail -n 1))
    - name: Upload a Release Asset (Windows ZIP)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/upload-release-asset@v1
      with:
        # The URL for uploading assets to the release
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        # The path to the asset you want to upload
        asset_path: ${{ runner.temp }}/zip-archive-Windows/zifu-Windows.zip
        # The name of the asset you want to upload
        asset_name: zifu-${{ steps.get_version.outputs.VERSION }}-windows.zip
        # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
        asset_content_type: application/zip
    - name: Upload a Release Asset (Linux ZIP)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/upload-release-asset@v1
      with:
        # The URL for uploading assets to the release
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        # The path to the asset you want to upload
        asset_path: ${{ runner.temp }}/zip-archive-Linux/zifu-Linux.zip
        # The name of the asset you want to upload
        asset_name: zifu-${{ steps.get_version.outputs.VERSION }}-linux.zip
        # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
        asset_content_type: application/zip
    - name: Upload a Release Asset (Ubuntu deb)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/upload-release-asset@v1
      with:
        # The URL for uploading assets to the release
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        # The path to the asset you want to upload
        asset_path: ${{ runner.temp }}/deb-package/${{ steps.get_version.outputs.DEB_NAME }}
        # The name of the asset you want to upload
        asset_name: ${{ steps.get_version.outputs.DEB_NAME }}
        # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
        asset_content_type: application/vnd.debian.binary-package
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/release
          target/debug
          target/.rustc_info.json
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Upload crate
      uses: actions-rs/cargo@v1
      with:
        command: publish
        args: --token ${{ secrets.CARGO_TOKEN }}
